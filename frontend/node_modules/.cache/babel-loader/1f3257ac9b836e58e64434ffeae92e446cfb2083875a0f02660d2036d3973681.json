{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shantanu Armal\\\\OneDrive\\\\Desktop\\\\IntershipAssignments\\\\LocationFlowProject\\\\frontend\\\\src\\\\components\\\\LocationSelection.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\n// import { useNavigate } from 'react-router-dom';  // Import useNavigate from react-router-dom\n// import './LocationSelection.css';\n\n// const LocationSelection = () => {\n//   const { isLoaded } = useJsApiLoader({\n//     googleMapsApiKey: 'AIzaSyADMDreOoidHSbnP7grvNILrvf3WKeMdjw',\n//   });\n\n//   const [location, setLocation] = useState({ lat: 0, lng: 0 });\n//   const navigate = useNavigate();  // Initialize useNavigate\n\n//   const handleLocateMe = () => {\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         setLocation({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       },\n//       () => alert('Failed to get location')\n//     );\n//   };\n\n//   const handleAddressForm = () => {\n//     navigate('/address-form');  // Navigate to /address-form\n//   };\n\n//   const handleAddressManagement = () => {\n//     navigate('/manage-addresses');  // Navigate to /manage-addresses\n//   };\n\n//   if (!isLoaded) return <div>Loading...</div>;\n\n//   return (\n//     <div className=\"google-map\">\n//       <h1>Select Your Location</h1>\n//       <GoogleMap\n//         center={location}\n//         zoom={15}\n//         mapContainerStyle={{ width: '100%', height: '400px' }}\n//         onClick={(e) =>\n//           setLocation({ lat: e.latLng.lat(), lng: e.latLng.lng() })\n//         }\n//       >\n//         <Marker position={location} />\n//       </GoogleMap>\n//       <button onClick={handleLocateMe}>Locate Me</button>\n//       <div className=\"navigation-buttons\">\n//         <button onClick={handleAddressForm}>Address Form</button>\n//         <button onClick={handleAddressManagement}>Manage Addresses</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LocationSelection;\n\nimport React, { useState } from 'react';\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport './LocationSelection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationSelection = () => {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: 'AIzaSyADMDreOoidHSbnP7grvNILrvf3WKeMdjw'\n  });\n  const [location, setLocation] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [loadingLocation, setLoadingLocation] = useState(false); // Loading state for \"Locate Me\" button\n  const navigate = useNavigate();\n  const handleLocateMe = () => {\n    setLoadingLocation(true); // Set loading state to true\n    navigator.geolocation.getCurrentPosition(position => {\n      setLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      setLoadingLocation(false); // Reset loading state\n    }, () => {\n      alert('Failed to get location. Please enable location services.');\n      setLoadingLocation(false); // Reset loading state\n    });\n  };\n  const handleAddressForm = () => {\n    navigate('/address-form');\n  };\n  const handleAddressManagement = () => {\n    navigate('/manage-addresses');\n  };\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-map\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select Your Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: location,\n      zoom: 15,\n      mapContainerStyle: {\n        width: '100%',\n        height: '400px'\n      },\n      onClick: e => setLocation({\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng()\n      }),\n      children: /*#__PURE__*/_jsxDEV(Marker, {\n        position: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLocateMe,\n      disabled: loadingLocation,\n      children: loadingLocation ? 'Locating...' : 'Locate Me'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddressForm,\n        children: \"Address Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddressManagement,\n        children: \"Manage Addresses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationSelection, \"1P4w7yHZ2rV9qS8r4Pwd9FkDAQ8=\", false, function () {\n  return [useJsApiLoader, useNavigate];\n});\n_c = LocationSelection;\nexport default LocationSelection;\nvar _c;\n$RefreshReg$(_c, \"LocationSelection\");","map":{"version":3,"names":["React","useState","GoogleMap","Marker","useJsApiLoader","useNavigate","jsxDEV","_jsxDEV","LocationSelection","_s","isLoaded","googleMapsApiKey","location","setLocation","lat","lng","loadingLocation","setLoadingLocation","navigate","handleLocateMe","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","handleAddressForm","handleAddressManagement","children","fileName","_jsxFileName","lineNumber","columnNumber","className","center","zoom","mapContainerStyle","width","height","onClick","e","latLng","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Shantanu Armal/OneDrive/Desktop/IntershipAssignments/LocationFlowProject/frontend/src/components/LocationSelection.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\n// import { useNavigate } from 'react-router-dom';  // Import useNavigate from react-router-dom\n// import './LocationSelection.css';\n\n// const LocationSelection = () => {\n//   const { isLoaded } = useJsApiLoader({\n//     googleMapsApiKey: 'AIzaSyADMDreOoidHSbnP7grvNILrvf3WKeMdjw',\n//   });\n\n//   const [location, setLocation] = useState({ lat: 0, lng: 0 });\n//   const navigate = useNavigate();  // Initialize useNavigate\n\n//   const handleLocateMe = () => {\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         setLocation({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       },\n//       () => alert('Failed to get location')\n//     );\n//   };\n\n//   const handleAddressForm = () => {\n//     navigate('/address-form');  // Navigate to /address-form\n//   };\n\n//   const handleAddressManagement = () => {\n//     navigate('/manage-addresses');  // Navigate to /manage-addresses\n//   };\n\n//   if (!isLoaded) return <div>Loading...</div>;\n\n//   return (\n//     <div className=\"google-map\">\n//       <h1>Select Your Location</h1>\n//       <GoogleMap\n//         center={location}\n//         zoom={15}\n//         mapContainerStyle={{ width: '100%', height: '400px' }}\n//         onClick={(e) =>\n//           setLocation({ lat: e.latLng.lat(), lng: e.latLng.lng() })\n//         }\n//       >\n//         <Marker position={location} />\n//       </GoogleMap>\n//       <button onClick={handleLocateMe}>Locate Me</button>\n//       <div className=\"navigation-buttons\">\n//         <button onClick={handleAddressForm}>Address Form</button>\n//         <button onClick={handleAddressManagement}>Manage Addresses</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LocationSelection;\n\n\n\nimport React, { useState } from 'react';\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport './LocationSelection.css';\n\nconst LocationSelection = () => {\n  const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: 'AIzaSyADMDreOoidHSbnP7grvNILrvf3WKeMdjw',\n  });\n\n  const [location, setLocation] = useState({ lat: 0, lng: 0 });\n  const [loadingLocation, setLoadingLocation] = useState(false); // Loading state for \"Locate Me\" button\n  const navigate = useNavigate();\n\n  const handleLocateMe = () => {\n    setLoadingLocation(true); // Set loading state to true\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLoadingLocation(false); // Reset loading state\n      },\n      () => {\n        alert('Failed to get location. Please enable location services.');\n        setLoadingLocation(false); // Reset loading state\n      }\n    );\n  };\n\n  const handleAddressForm = () => {\n    navigate('/address-form');\n  };\n\n  const handleAddressManagement = () => {\n    navigate('/manage-addresses');\n  };\n\n  if (!isLoaded) return <div>Loading...</div>;\n\n  return (\n    <div className=\"google-map\">\n      <h1>Select Your Location</h1>\n      <GoogleMap\n        center={location}\n        zoom={15}\n        mapContainerStyle={{ width: '100%', height: '400px' }}\n        onClick={(e) =>\n          setLocation({ lat: e.latLng.lat(), lng: e.latLng.lng() })\n        }\n      >\n        <Marker position={location} />\n      </GoogleMap>\n      <button onClick={handleLocateMe} disabled={loadingLocation}>\n        {loadingLocation ? 'Locating...' : 'Locate Me'}\n      </button>\n      <div className=\"navigation-buttons\">\n        <button onClick={handleAddressForm}>Address Form</button>\n        <button onClick={handleAddressManagement}>Manage Addresses</button>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationSelection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}